# .github/workflows/deploy-backend.yml
name: Deploy Backend

on:
  push:
    branches: [main]
    paths:
      - "node-api/**"
      - ".github/workflows/deploy-backend.yml"
  pull_request:
    branches: [main]
    paths:
      - "node-api/**"
      - ".github/workflows/deploy-backend.yml"

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          cd node-api
          npm install

      - name: Create deployment package
        run: |
          cd node-api
          zip -r ../node-api-deploy.zip . -x "node_modules/*" "*.git*"

      - name: Upload to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "node-api-deploy.zip"
          target: "/tmp/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Stop existing app
            pm2 stop node-api || true

            # Backup current app
            rm -rf ~/app-backup
            mv ~/app ~/app-backup || true
            mkdir -p ~/app

            # Extract new code
            cd ~/app
            unzip -o /tmp/node-api-deploy.zip
            rm /tmp/node-api-deploy.zip

            # Install dependencies
            npm install --production

            # Set environment variables
            echo "NODE_ENV=${{ secrets.NODE_ENV }}" > .env
            echo "PORT=${{ secrets.BACKEND_PORT }}" >> .env
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
            echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env
            echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
            echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
            echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> .env
            echo "CLIENT_URL=${{ secrets.CLIENT_URL }}" >> .env
            echo "FLASK_API_URL_DR=${{ secrets.FLASK_API_URL_DR }}" >> .env
            echo "FLASK_API_URL_AMD=${{ secrets.FLASK_API_URL_AMD }}" >> .env
            echo "FLASK_API_URL_RVO=${{ secrets.FLASK_API_URL_RVO }}" >> .env
            echo "FLASK_API_URL_GLAUCOMA=${{ secrets.FLASK_API_URL_GLAUCOMA }}" >> .env
            echo "FLASK_API_DR_Multi=${{ secrets.FLASK_API_DR_Multi }}" >> .env
            echo "FLASK_API_AMD_Multi=${{ secrets.FLASK_API_AMD_Multi }}" >> .env
            echo "FLASK_API_RVO_Multi=${{ secrets.FLASK_API_RVO_Multi }}" >> .env
            echo "FLASK_API_GLAUCOMA_Multi=${{ secrets.FLASK_API_GLAUCOMA_Multi }}" >> .env

            # Start app with PM2
            pm2 start npm --name "node-api" -- start
            pm2 save

            # Show status
            pm2 status
